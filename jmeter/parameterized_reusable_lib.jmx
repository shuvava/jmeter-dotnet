<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Reusable Keywords Library" enabled="false"/>
      <hashTree>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Keyword Executor" enabled="true">
          <stringProp name="SwitchController.value">${action}</stringProp>
        </SwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="GetOrder" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">do JS assertion and write result to log</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="orderId" elementType="Argument">
                  <stringProp name="Argument.name">orderId</stringProp>
                  <stringProp name="Argument.value">${__UUID}</stringProp>
                  <stringProp name="Argument.desc">random order id</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/order/${orderId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assert Response" enabled="true">
                <stringProp name="TestPlan.comments">https://jmeter.apache.org/usermanual/component_reference.html#JSR223_Assertion</stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var responseCode = SampleResult.getResponseCode()
var response = SampleResult.getResponseDataAsString();
var jsonOutput = JSON.parse(response);
log.info(&quot;Current Sampler class is: &quot; + ctx.getCurrentSampler());
log.info(&quot;JMeter Engine class is: &quot; + ctx.getEngine());

 
log.info(&quot;Previous Response Message is: &quot; + ctx.getPreviousResult().getResponseMessage());
log.info(&quot;Previous Response Code is: &quot; + ctx.getPreviousResult().getResponseCode());
log.info(&quot;Previous Response URL is: &quot; + ctx.getPreviousResult().getURL());
log.info(&quot;Previous Response Time is: &quot; + ctx.getPreviousResult().getTime());


log.info(&quot;Previous Sampler name is: &quot; + ctx.getPreviousSampler().getName());
log.info(&quot;Current Sampler name is: &quot; + ctx.getCurrentSampler().getName());
var itter = ctx.getCurrentSampler().propertyIterator();
while (itter.hasNext()) {
	var prop = itter.next()
	log.info(&quot;prop &quot;+prop.getName()+ &quot;=&quot;+prop.getStringValue())
}
 
 
log.info(&quot;Current Domain is: &quot; + ctx.getCurrentSampler().getPropertyAsString(&quot;HTTPSampler.domain&quot;));
log.info(&quot;Current Protocol is: &quot; + ctx.getCurrentSampler().getPropertyAsString(&quot;HTTPSampler.protocol&quot;));
log.info(&quot;Current Port is: &quot; + ctx.getCurrentSampler().getPropertyAsString(&quot;HTTPSampler.port&quot;));
log.info(&quot;Current Method is: &quot; + ctx.getCurrentSampler().getPropertyAsString(&quot;HTTPSampler.method&quot;));



 
log.info(&quot;Thread Name is: &quot; + ctx.getThread().getThreadName());
log.info(&quot;Thread Start Time is: &quot; + ctx.getThread().getStartTime());
log.info(&quot;Thread End Time is: &quot; + ctx.getThread().getEndTime());

log.info(&quot;Start Next Thread Loop on Error: &quot; + ctx.getThreadGroup().getOnErrorStartNextLoop());
log.info(&quot;Stop Test on Error: &quot; + ctx.getThreadGroup().getOnErrorStopTest());

// set Assertion result:
if (responseCode !== 200 &amp;&amp; !SampleResult.isResponseCodeOK()) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Respose code should be OK&quot;)
}
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GUI mode variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="gui_serverName" elementType="Argument">
              <stringProp name="Argument.name">gui_serverName</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gui_pNo" elementType="Argument">
              <stringProp name="Argument.name">gui_pNo</stringProp>
              <stringProp name="Argument.value">59790</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gui_keywords" elementType="Argument">
              <stringProp name="Argument.name">gui_keywords</stringProp>
              <stringProp name="Argument.value">GetOrder</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(serverName,${gui_serverName})}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(pNo,${gui_pNo})}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(pCol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="-- Executing  -- Keywords: ${__split(${__P(keywords,${gui_keywords})},keyword,;)}" enabled="true">
          <stringProp name="TestPlan.comments">https://jmeter.apache.org/usermanual/functions.html#__P</stringProp>
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">keyword</stringProp>
          <stringProp name="ForeachController.returnVal">action</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">10</stringProp>
        </ForeachController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="839132346">Reusable Keywords Library</stringProp>
              <stringProp name="1086716266">Keyword Executor</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
